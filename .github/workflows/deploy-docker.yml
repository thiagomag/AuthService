name: CI/CD Pipeline with Dockerfile

on:
  push:
    branches:
      - master  # Build automático ao enviar código para a branch "master"
  workflow_dispatch:  # Deploy manual

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production  # Especifica o environment "production" para este job

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 1: Configurar o JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v1
        with:
          java-version: '21'

      # Step 2: Build com Gradle usando o JDK 21
      - name: Build with Gradle
        run: chmod +x ./gradlew && ./gradlew build

      # Step 3: Build imagem docker
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest .

      # Step 4: Login no docker hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 5: Push imagem docker para o Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production  # Especifica o environment "production" para este job
    if: github.event_name == 'workflow_dispatch'  # Executa o deploy apenas manualmente

    steps:
      # Step 1: Checkout do repositório
      - name: Checkout the repository
        uses: actions/checkout@v2

      # Step 2: Deploy para AWS EC2 via SSH
      - name: Deploy to AWS EC2 via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          script: |
            mkdir -p /home/ubuntu/auth-service
            cd /home/ubuntu/auth-service
            docker stop $(docker ps -a -q) || true
            docker rm $(docker ps -a -q) || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
            docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest